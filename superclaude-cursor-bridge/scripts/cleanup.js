#!/usr/bin/env node

/**
 * Ëá™Âãï„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà
 * „ÉÜ„Çπ„ÉàÂÆüË°åÂæå„ÇÑCI/CD„Åß‰∏çË¶Å„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§„Åô„Çã
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

// ÂâäÈô§ÂØæË±°„ÅÆ„Éë„Çø„Éº„É≥Ôºàgitignore„Å®ÈáçË§á„Åó„Å™„ÅÑ„Éï„Ç°„Ç§„É´„ÅÆ„ÅøÔºâ
const CLEANUP_PATTERNS = [
  // ÊòéÁ¢∫„Å´‰∏ÄÊôÇÁöÑ„Å™„Éï„Ç°„Ç§„É´
  '*.tmp',
  '*.temp',
  '*.swp',
  '*.swo',
  '*~',
  '.DS_Store',
  'Thumbs.db',

  // „Ç≥„Éû„É≥„ÉâÂÆüË°å„Åß‰ΩúÊàê„Åï„Çå„Çã‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´
  'coverage/',
  'test-results/',
  '.nyc_output/',

  // „É≠„Ç∞„Éï„Ç°„Ç§„É´ÔºàÈáçË¶Å„Åß„Å™„ÅÑ„ÇÇ„ÅÆÔºâ
  'debug.log',
  'error.log'
];

// ‰øùË≠∑„Åô„Çã„Éá„Ç£„É¨„ÇØ„Éà„É™ÔºàÂâäÈô§„Åó„Å™„ÅÑÔºâ
const PROTECTED_DIRS = [
  'node_modules',
  '.git',
  'src',
  'tests',
  'scripts',
  '.claude'
];

/**
 * globÈ¢®„Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„É≥„Ç∞ÔºàÁ∞°ÊòìÁâàÔºâ
 */
function matchPattern(filename, pattern) {
  const dirPattern = pattern.endsWith('/');
  const normalized = pattern.replace(/\/$/, '');

  // ÁâπÊÆäÊñáÂ≠ó„Çí„Ç®„Çπ„Ç±„Éº„ÉóÔºà* „Å® ? „ÅØÂæåÊÆµ„Åß„ÉØ„Ç§„É´„Éâ„Ç´„Éº„ÉâÂåñÔºâ
  const esc = (s) => s.replace(/[-/\\^$+?.()|[\]{}]/g, '\\$&');
  let safe = esc(normalized)
    .replace(/\*/g, '.*')
    .replace(/\?/g, '.');

  // „Éá„Ç£„É¨„ÇØ„Éà„É™ÊåáÂÆö„ÅØÈÖç‰∏ãÂÖ®‰Ωì„ÇÇÂØæË±°„Å´„Åô„Çã
  if (dirPattern) {
    safe = `${safe}(?:\\/.*)?`;
  }

  try {
    return new RegExp(`^${safe}$`).test(filename);
  } catch (error) {
    // Ê≠£Ë¶èË°®Áèæ„ÅåÁÑ°Âäπ„Å™Â†¥Âêà„ÅØÂÆâÂÖ®ÂÅ¥„Å´ÂÄí„Åó„Å¶false„ÇíËøî„Åô
    console.warn(`Invalid pattern: ${pattern}`, error.message);
    return false;
  }
}

/**
 * „Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂÜçÂ∏∞ÁöÑ„Å´„Çπ„Ç≠„É£„É≥„Åó„Å¶ÂâäÈô§ÂÄôË£ú„ÇíÊé¢„Åô
 */
async function findFilesToDelete(dir, relativePath = '') {
  const filesToDelete = [];

  try {
    const entries = await fs.readdir(dir, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      const relativeFullPath = path.join(relativePath, entry.name);

      // ‰øùË≠∑„Åï„Çå„Åü„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅØ„Çπ„Ç≠„ÉÉ„Éó
      if (entry.isDirectory() && PROTECTED_DIRS.includes(entry.name)) {
        continue;
      }

      // „Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const shouldDelete = CLEANUP_PATTERNS.some(pattern => {
        const nameMatch = matchPattern(entry.name, pattern);
        const pathMatch = matchPattern(relativeFullPath, pattern);

        // „Éá„Éê„ÉÉ„Ç∞Âá∫ÂäõÔºàÈñãÁô∫ÊôÇ„ÅÆ„ÅøÔºâ
        if (process.env.DEBUG_CLEANUP) {
          console.log(`Checking ${entry.name} against ${pattern}: name=${nameMatch}, path=${pathMatch}`);
        }

        return nameMatch || pathMatch;
      });

      if (shouldDelete) {
        filesToDelete.push({
          path: fullPath,
          relativePath: relativeFullPath,
          isDirectory: entry.isDirectory(),
          size: entry.isFile() ? (await fs.stat(fullPath)).size : 0
        });
      } else if (entry.isDirectory()) {
        // ‰øùË≠∑„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅØÂÜçÂ∏∞ÁöÑ„Å´„Çπ„Ç≠„É£„É≥
        const subFiles = await findFilesToDelete(fullPath, relativeFullPath);
        filesToDelete.push(...subFiles);
      }
    }
  } catch (error) {
    console.warn(`Warning: Could not scan directory ${dir}: ${error.message}`);
  }

  return filesToDelete;
}

/**
 * „Éï„Ç°„Ç§„É´/„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂâäÈô§
 */
async function deleteItem(item) {
  try {
    if (item.isDirectory) {
      await fs.rm(item.path, { recursive: true, force: true });
      console.log(`üóÇÔ∏è  Deleted directory: ${item.relativePath}`);
    } else {
      await fs.unlink(item.path);
      const sizeStr = item.size > 1024
        ? `${(item.size / 1024).toFixed(1)}KB`
        : `${item.size}B`;
      console.log(`üìÑ Deleted file: ${item.relativePath} (${sizeStr})`);
    }
  } catch (error) {
    console.error(`‚ùå Failed to delete ${item.relativePath}: ${error.message}`);
  }
}

/**
 * „É°„Ç§„É≥Âá¶ÁêÜ
 */
async function main() {
  console.log('üßπ Starting cleanup process...');
  console.log(`üìÅ Project root: ${projectRoot}`);

  const filesToDelete = await findFilesToDelete(projectRoot);

  if (filesToDelete.length === 0) {
    console.log('‚ú® No files to clean up!');
    return;
  }

  console.log(`\nüìã Found ${filesToDelete.length} items to delete:`);
  filesToDelete.forEach(item => {
    const icon = item.isDirectory ? 'üóÇÔ∏è ' : 'üìÑ';
    console.log(`   ${icon} ${item.relativePath}`);
  });

  // ÂâäÈô§Á¢∫Ë™çÔºàCIÁí∞Â¢É„Åß„ÅØËá™ÂãïÂÆüË°åÔºâ
  const isCI = process.env.CI || process.argv.includes('--yes') || process.argv.includes('-y');

  if (!isCI) {
    if (!process.stdin.isTTY) {
      console.log('\n‚ÑπÔ∏è Non-TTY detected. Re-run with --yes to auto-confirm.');
      return;
    }
    console.log('\n‚ùì Delete these files? (y/N)');
    process.stdin.setRawMode(true);
    process.stdin.resume();

    const answer = await new Promise(resolve => {
      process.stdin.once('data', data => {
        const input = data.toString().trim().toLowerCase();
        resolve(input === 'y' || input === 'yes');
      });
    });

    process.stdin.setRawMode(false);
    process.stdin.pause();

    if (!answer) {
      console.log('‚ùå Cleanup cancelled');
      return;
    }
  }

  console.log('\nüóëÔ∏è  Deleting files...');

  let deletedCount = 0;
  let totalSize = 0;

  for (const item of filesToDelete) {
    await deleteItem(item);
    deletedCount++;
    totalSize += item.size;
  }

  const totalSizeStr = totalSize > 1024 * 1024
    ? `${(totalSize / 1024 / 1024).toFixed(1)}MB`
    : totalSize > 1024
      ? `${(totalSize / 1024).toFixed(1)}KB`
      : `${totalSize}B`;

  console.log(`\n‚úÖ Cleanup completed!`);
  console.log(`   üìä Deleted ${deletedCount} items`);
  console.log(`   üíæ Freed ${totalSizeStr} of disk space`);
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught exception:', error.message);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled rejection:', reason);
  process.exit(1);
});

// „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error('‚ùå Cleanup failed:', error.message);
    process.exit(1);
  });
}

export { findFilesToDelete, deleteItem };